# -*- coding: utf-8 -*-
"""Streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ewXhj1Jde3s7gSn-2v12oAChPwDKisyu
"""

import streamlit as st
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from PIL import Image
import os
import gdown

if not os.path.exists("best_model4.h5"):
    with st.spinner("📥 Mengunduh model dari Google Drive..."):
        url = "https://drive.google.com/uc?id=170c8XSSxyzOd5YBCVH8byZ34fG1YmXUS"
        gdown.download(url, "model.h5", quiet=False)

# Konfigurasi halaman
st.set_page_config(page_title="Klasifikasi PCB", layout="centered", page_icon="🔧")

# Sidebar informasi
with st.sidebar:
    st.title("ℹ️ Tentang Aplikasi")
    st.markdown("""
    Aplikasi ini digunakan untuk **mengidentifikasi model PCB** secara otomatis menggunakan **CNN (Convolutional Neural Network)**.

    **Petunjuk Penggunaan:**
    1. Unggah gambar PCB
    2. Klik tombol 'Prediksi'
    3. Lihat hasil klasifikasi

    **Format gambar:** JPG, PNG
    **Ukuran input:** 500x500 px
    """)

# Judul utama
st.title("🔧 Klasifikasi Model PCB Otomatis")
st.markdown("Gunakan model CNN untuk mengklasifikasikan jenis PCB berdasarkan gambar yang diunggah.")

# Load model
model = load_model("best_model4.h5")

# Daftar label kelas (ubah sesuai modelmu)
labels = ["2T-C32BG1I", "2T-C32DC1i", "2T-C32Df1i","2T-C55EK1X"]

# Komponen upload
uploaded_file = st.file_uploader("📤 Silakan unggah gambar PCB Anda:", type=["jpg", "jpeg", "png"])

# Tampilkan gambar yang diunggah
if uploaded_file is not None:
    img = Image.open(uploaded_file)
    st.image(img, caption="📷 Gambar PCB yang Anda unggah", use_column_width=True)

# Tombol prediksi
if st.button("🔍 Prediksi"):
      with st.spinner("Sedang memproses gambar..."):
            # Preprocessing
            img_resized = img.resize((500, 500))
            img_array = image.img_to_array(img_resized)
            img_array = np.expand_dims(img_array, axis=0)
            img_array = img_array / 255.0

            # Prediksi
            prediction = model.predict(img_array)
            predicted_index = np.argmax(prediction)
            predicted_label = labels[predicted_index]
            confidence = np.max(prediction)

            # Hasil prediksi
            st.success("✅ Prediksi berhasil!")
            st.markdown(f"### 🔧 Hasil: **{predicted_label}**")
            st.progress(int(confidence * 100))
            st.markdown(f"**Tingkat keyakinan model:** {confidence*100:.2f}%")

            # Distribusi kelas
            st.subheader("📊 Probabilitas Semua Kelas:")
            for i in range(len(labels)):
              st.write(f"- {labels[i]}: {prediction[0][i]*100:.2f}%")

else:
    st.warning("📎 Harap unggah gambar terlebih dahulu untuk melanjutkan.")
